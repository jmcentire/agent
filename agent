#!/bin/bash

# === Configuration ===
# Log Directory: User-specific, avoids needing root for /var/log
LOG_DIR="${HOME}/.local/share/agent/logs"
# Ensure log directory exists
mkdir -p "$LOG_DIR"
# Log File: Now within the user's log directory
LOG_FILE="${LOG_DIR}/agent_shell_$(date +%Y%m%d_%H%M%S).log"

OPENAI_API_ENDPOINT="https://api.openai.com/v1/chat/completions"
MODEL="gpt-4-turbo-preview" # Or your preferred model
TEMPERATURE=0.2
MAX_TOKENS=250              # Max tokens for the AI's *command* response
AGENT_PROMPT="agent: "
DEBUG_MODE=0                # Default: Quiet mode (0=off, 1=on)
CONFIRM_MODE=1              # Default: Confirm before execution (0=off, 1=on)

# === Logging Function (Conditional Debug Output) ===
log() {
    # Always write timestamped message to the log file
    # Check if log dir is writable, though mkdir should handle most cases
    if [ -w "$LOG_DIR" ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [AgentShell] $@" >> "$LOG_FILE"
    else
        # Fallback: If dir somehow isn't writable after mkdir, log to stderr
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [AgentShell] [LOG_WRITE_ERROR] $@" >&2
    fi
    # Only write to stderr if DEBUG_MODE is enabled
    if [ "$DEBUG_MODE" -eq 1 ]; then
        echo "[$(date '+%Y-%m-%d %H:%M:%S')] [AgentShell] $@" >&2
    fi
}

# === Command-Line Argument Parsing ===
while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose|--debug=on)
            DEBUG_MODE=1
            shift
            ;;
        --debug=off)
            DEBUG_MODE=0
            shift
            ;;
        --confirm=on)
            CONFIRM_MODE=1
            shift
            ;;
        --confirm=off)
            CONFIRM_MODE=0
            shift
            ;;
        *)
            echo "Unknown option: $1" >&2
            echo "Usage: $0 [-v|--verbose|--debug=on|--debug=off] [--confirm=on|--confirm=off]" >&2
            exit 1
            ;;
    esac
done

# === Initial Setup ===
log "Initializing Agent Shell... (Debug Mode: $DEBUG_MODE, Confirm Mode: $CONFIRM_MODE)"
log "Logging to: $LOG_FILE"
log "Checking for OPENAI_API_KEY..."
if [ -z "$OPENAI_API_KEY" ]; then
  log "FATAL: OPENAI_API_KEY environment variable is not set."
  echo "[FATAL Error] OPENAI_API_KEY is not set. Please set it before running the script." >&2
  exit 1
fi
log "OPENAI_API_KEY found."

if ! command -v curl &> /dev/null || ! command -v jq &> /dev/null; then
    log "FATAL: 'curl' or 'jq' command not found. Please install them."
    echo "[FATAL Error] 'curl' and 'jq' are required but not installed." >&2
    exit 1
fi
log "Dependencies (curl, jq) found."

# === System Prompt (REVISED with Safety Constraints) ===
SYSTEM_PROMPT="You are an AI assistant providing Linux commands. Your task is to generate the **exact, single-line Linux bash command (or pipeline)** required to achieve the user's goal within a standard Linux terminal.
**CRITICAL:** You MUST output ONLY the raw command string itself.
- **DO NOT** include any explanations, comments, introductory text.
- **DO NOT** wrap the command in markdown backticks (\` or \`\`\`).
- **DO NOT** add any text before or after the command.
**SAFETY CRITICAL:**
- **AVOID** generating commands that modify or check the integrity of critical **mounted** filesystems (like '/', '/boot', '/usr') on the live system (e.g., using \`fsck\`, \`mkfs\`, \`dd\` unsafely). Such tasks usually require rebooting or a live environment. Suggest these procedures or safer diagnostic alternatives (like \`smartctl\` for disk health, or checking logs) instead.
- **AVOID** inherently destructive commands (\`rm -rf\` on wide paths, etc.) unless the user's intent is extremely explicit and clear. Prefer safer alternatives.
The script receiving your output will execute it directly using 'eval' **after user confirmation (by default)**. The command's output (stdout & stderr) will be shown to the user, and the script will prompt for the next command.
Generate a safe and effective command using standard Linux tools (curl, grep, awk, sed, jq, ls, find, etc.). Use pipelines (|) or command chains (&&, ;) if needed. If the goal is impossible or unsafe with standard tools *according to the safety rules above*, output exactly: echo \"Error: Task is too risky or requires manual intervention (e.g., reboot, live environment).\""


# === Main Interactive Loop ===
log "Starting interactive session."
echo "Welcome to Agent Shell. Type your goal, or 'exit'/'quit' (or press Ctrl+D) to leave."
# Notify user of non-default modes at start
if [ "$DEBUG_MODE" -eq 1 ]; then echo "[Agent Info] Running in verbose/debug mode." >&2; fi
if [ "$CONFIRM_MODE" -eq 0 ]; then echo "[Agent Info] Running with confirmation OFF (auto-execution)." >&2; fi

while true; do
    # Read user input - using -e enables readline history/editing
    read -e -p "$AGENT_PROMPT" USER_GOAL
    read_status=$?
    if [ $read_status -ne 0 ]; then echo; log "EOF detected (Ctrl+D). Exiting."; break; fi

    USER_GOAL_TRIMMED=$(echo "$USER_GOAL" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//') # Trim whitespace

    # --- Handle Internal Commands FIRST ---
    # Use case for potentially cleaner matching
    case "$USER_GOAL_TRIMMED" in
        exit|quit)
            log "Exit command received ('$USER_GOAL_TRIMMED'). Exiting."; break ;;
        set\ debug=on)
            if [ "$DEBUG_MODE" -ne 1 ]; then DEBUG_MODE=1; echo "[Agent Info] Debug mode enabled."; log "Debug mode explicitly enabled by user."; else echo "[Agent Info] Debug mode is already enabled."; fi
            continue ;;
        set\ debug=off)
             if [ "$DEBUG_MODE" -ne 0 ]; then DEBUG_MODE=0; echo "[Agent Info] Debug mode disabled."; log "Debug mode explicitly disabled by user."; else echo "[Agent Info] Debug mode is already disabled."; fi
            continue ;;
        set\ confirmation=on)
            if [ "$CONFIRM_MODE" -ne 1 ]; then CONFIRM_MODE=1; echo "[Agent Info] Confirmation mode ON."; log "Confirmation mode explicitly enabled by user."; else echo "[Agent Info] Confirmation mode is already ON."; fi
            continue ;;
        set\ confirmation=off)
             if [ "$CONFIRM_MODE" -ne 0 ]; then CONFIRM_MODE=0; echo "[Agent Info] Confirmation mode OFF (auto-execution enabled)."; log "Confirmation mode explicitly disabled by user."; else echo "[Agent Info] Confirmation mode is already OFF."; fi
            continue ;;
        "") # Empty input
            continue ;;
    esac
    # --- End Internal Commands ---

    # --- Process Goal via AI ---
    log "User Goal Received: $USER_GOAL_TRIMMED"

    log "Constructing API Payload..."
    json_payload=$(jq -n --arg model "$MODEL" --argjson temp "$TEMPERATURE" --argjson max_tokens "$MAX_TOKENS" --arg system_prompt "$SYSTEM_PROMPT" --arg user_prompt "$USER_GOAL_TRIMMED" \
    '{
        "model": $model,
        "messages": [
            {"role": "system", "content": $system_prompt},
            {"role": "user", "content": $user_prompt}
        ],
        "temperature": $temp,
        "max_tokens": $max_tokens,
        "n": 1,
        "stop": null
    }')
    jq_exit_status=$?
    if [ $jq_exit_status -ne 0 ]; then
        log "FATAL: jq command failed during payload construction (Exit Status: $jq_exit_status)."
        echo "[Agent Error] Internal error: Failed to construct API request payload (jq error)." >&2
        continue
    fi
    if [ "$DEBUG_MODE" -eq 1 ]; then log "API Payload (summary): $(echo "$json_payload" | jq -c '.messages[1].content = "<user_goal>"')"; fi

    log "Calling OpenAI API..."
    api_response=$(curl -s -X POST "$OPENAI_API_ENDPOINT" \
         -H "Content-Type: application/json" \
         -H "Authorization: Bearer $OPENAI_API_KEY" \
         -d "$json_payload")
    if [ "$DEBUG_MODE" -eq 1 ]; then log "Raw API Response (start): $(echo "$api_response" | head -c 200)..."; fi

    log "Extracting command from API response..."
    error_message=$(echo "$api_response" | jq -r '.error.message // empty')
    if [ -n "$error_message" ]; then
        log "API Error: $error_message"; echo "[Agent Error] OpenAI API returned an error: $error_message" >&2; continue
    fi

    generated_command=$(echo "$api_response" | jq -r '.choices[0].message.content // empty')
    generated_command=$(echo "$generated_command" | sed 's/^[[:space:]]*//; s/[[:space:]]*$//') # Trim whitespace

    if [ -z "$generated_command" ]; then
        log "Error: Could not extract command (extracted empty string)."; echo "[Agent Error] Failed to get a valid command from the AI." >&2
        if [ "$DEBUG_MODE" -eq 1 ]; then log "Full API Response for Debugging: $api_response"; fi; continue
    fi

    # Check AI refusal (using the specific refusal message from the refined prompt)
    if [[ "$generated_command" == 'echo "Error: Task is too risky or requires manual intervention (e.g., reboot, live environment)."' ]]; then
        log "AI refused task due to safety/complexity."
        echo "[Agent Info] AI declined task:"
        ai_error_output=$(eval "$generated_command") # Execute the safe 'echo' command
        echo "$ai_error_output"
        echo "[AI Refusal Output] $ai_error_output" >> "$LOG_FILE"
        continue
    fi

    log "Extracted Command: [$generated_command]"

    # --- Prepare for Execution ---
    execute_command=0 # Flag: 0=skip, 1=run

    if [ "$CONFIRM_MODE" -eq 1 ]; then
        # === CONFIRMATION STEP (if CONFIRM_MODE is ON) ===
        echo
        echo "** Proposed Command **"
        echo "   $generated_command"
        echo "*********************"
        # Read directly from terminal
        read -e -p "Execute this command? [y/N]: " confirm </dev/tty
        confirm_lower=$(echo "$confirm" | tr '[:upper:]' '[:lower:]')

        if [[ "$confirm_lower" == "y" || "$confirm_lower" == "yes" ]]; then
            log "User confirmed execution for command: [$generated_command]"
            execute_command=1
        else
            log "User REJECTED execution for command: [$generated_command]"
            echo "[Agent Info] Command execution skipped by user."
            execute_command=0
        fi
    else
        # Confirmation is OFF - proceed directly but log it
        log "Confirmation OFF. Proceeding directly with execution for command: [$generated_command]"
        execute_command=1
    fi

    # --- Execute Command (Only if execute_command flag is set) ---
    if [ "$execute_command" -eq 1 ]; then
        execution_status=-1 # Default status if eval somehow fails to run/set PIPESTATUS
        if [ "$DEBUG_MODE" -eq 1 ]; then
            # VERBOSE MODE Execution
            echo; echo "--- Agent Executing ---" >&2
            log "!!! CAUTION: Executing AI-generated command: [$generated_command] !!!"
            echo "$generated_command" >&2; echo "-----------------------" >&2
            ( eval "$generated_command" ) 2>&1 | tee -a "$LOG_FILE"
            execution_status=${PIPESTATUS[0]}
            log "Command execution finished with exit status: $execution_status"
            echo "--- Agent Finished (Status: $execution_status) ---" >&2; echo
        else
            # QUIET MODE Execution
            command_output=$( (eval "$generated_command") 2>&1 )
            execution_status=${PIPESTATUS[0]} # Capture status immediately
            if [ -n "$command_output" ]; then echo "$command_output"; fi
            # Manually log execution details to file ONLY
            echo "[Command Executed] [$generated_command] (Confirmation: $CONFIRM_MODE)" >> "$LOG_FILE"
            echo "[Command Exit Status] $execution_status" >> "$LOG_FILE"
            if [ -n "$command_output" ]; then echo "[Command Output Start]" >> "$LOG_FILE"; echo "$command_output" >> "$LOG_FILE"; echo "[Command Output End]" >> "$LOG_FILE"; else echo "[Command Output] <empty>" >> "$LOG_FILE"; fi
            # Notify user minimally on failure in quiet mode
            if [ $execution_status -ne 0 ]; then echo "[Agent Info: Command failed with status $execution_status]" >&2; fi
            # Add spacing like before
            if [ -n "$command_output" ] || [ $execution_status -ne 0 ]; then echo; fi
        fi
    fi # End if execute_command

done # End of while loop

# --- Cleanup ---
log "Agent shell terminated."
echo "Exiting Agent Shell."
exit 0
